// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum AttendanceStatus {
  PENDING
  ON_TIME
  LATE
  ABSENT
}

enum AlertType {
  MESSAGED
  CALLED
}

enum ParentAction {
  RESPONDED
  NO_RESPONSE
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AdminRole {
  SUPER_ADMIN
  ADMIN
  TEACHER
}

// Main entity models
model Kindergarten {
  id                    String           @id @default(uuid())
  name                  String           @unique
  address               String
  messageAlertThreshold DateTime         @db.Time() // Time of day for first alert
  callAlertThreshold    DateTime         @db.Time() // Time of day for call alert
  totalOperatingDays    Int              @default(0)
  operatingHours        OperatingHours[]
  classes               Class[]
  admins                Admin[]
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt

  @@index([name])
}

model OperatingHours {
  id             String       @id @default(uuid())
  dayOfWeek      DayOfWeek
  startTime      DateTime     @db.Time()
  endTime        DateTime     @db.Time()
  kindergarten   Kindergarten @relation(fields: [kindergartenId], references: [id])
  kindergartenId String

  @@unique([kindergartenId, dayOfWeek])
  @@index([kindergartenId])
}

model Class {
  id             String       @id @default(uuid())
  name           String
  capacity       Int
  kindergarten   Kindergarten @relation(fields: [kindergartenId], references: [id])
  kindergartenId String
  students       Student[]
  events         ClassEvent[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([kindergartenId, name])
  @@index([kindergartenId])
}

model Student {
  id                String              @id @default(uuid())
  fullName          String
  age               Int // @assert.range(0, 12) - Validate in API
  daysAbsent        Int                 @default(0)
  faceImageFront    String? // S3 filename
  faceImageLeft     String?
  faceImageRight    String?
  faceImageTiltUp   String?
  faceImageTiltDown String?
  class             Class?              @relation(fields: [classId], references: [id])
  classId           String?
  parent            Parent              @relation(fields: [parentId], references: [id])
  parentId          String
  attendance        Attendance[]
  alertLogs         AlertLog[]
  phoneNumbers      ParentPhoneNumber[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@index([classId])
  @@index([parentId])
  @@index([fullName])
}

model Parent {
  id         String    @id @default(uuid())
  firebaseId String    @unique
  email      String    @unique
  name       String
  students   Student[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([firebaseId])
}

model ParentPhoneNumber {
  id          String   @id @default(uuid())
  phoneNumber String   @unique
  student     Student  @relation(fields: [studentId], references: [id])
  studentId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Validate Malaysian phone number format in API layer
  // Pattern: ^01\d{8,9}$

  @@index([studentId])
}

model Attendance {
  id           String           @id @default(uuid())
  date         DateTime         @db.Date
  status       AttendanceStatus
  timeRecorded DateTime // When attendance was recorded
  student      Student          @relation(fields: [studentId], references: [id])
  studentId    String
  updatedAt    DateTime         @updatedAt // Track any status changes

  @@unique([studentId, date])
  @@index([date])
  @@index([studentId])
  @@index([status])
}

model AlertLog {
  id                   String       @id @default(uuid())
  alertTime            DateTime
  alertType            AlertType
  parentAction         ParentAction
  reason               String?
  phoneNumberContacted String
  student              Student      @relation(fields: [studentId], references: [id])
  studentId            String
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  @@index([alertTime])
  @@index([studentId])
  @@index([alertType])
}

model Event {
  id                   String       @id @default(uuid())
  title                String
  dateTime             DateTime
  description          String
  location             String
  cost                 Decimal      @db.Decimal(10, 2)
  requiredItems        String?      @db.Text
  teacherInChargeName  String?
  teacherInChargePhone String?
  classes              ClassEvent[]
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt

  @@index([dateTime])
}

model ClassEvent {
  class   Class  @relation(fields: [classId], references: [id])
  classId String
  event   Event  @relation(fields: [eventId], references: [id])
  eventId String

  @@id([classId, eventId])
  @@index([classId])
  @@index([eventId])
}

model Admin {
  id             String       @id @default(uuid())
  firebaseId     String       @unique
  email          String       @unique
  name           String
  role           AdminRole    @default(ADMIN)
  kindergarten   Kindergarten @relation(fields: [kindergartenId], references: [id])
  kindergartenId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([kindergartenId])
  @@index([firebaseId])
}
