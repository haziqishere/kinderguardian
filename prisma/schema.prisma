// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Kindergarten {
  id        String   @id @default(cuid())
  name      String
  address   String
  phone     String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  classes   Class[]
  alerts    Alert[]
  events    Event[]
}

model Class {
  id             String       @id @default(cuid())
  name           String
  capacity       Int
  kindergartenId String
  kindergarten   Kindergarten @relation(fields: [kindergartenId], references: [id], onDelete: Cascade)
  students       Student[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Student {
  id        String   @id @default(cuid())
  name      String
  classId   String
  class     Class    @relation(fields: [classId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Alert {
  id             String       @id @default(cuid())
  title          String
  message        String
  type           AlertType
  kindergartenId String
  kindergarten   Kindergarten @relation(fields: [kindergartenId], references: [id], onDelete: Cascade)
  targetUserType UserType
  isRead         Boolean      @default(false)
  expiresAt      DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Event {
  id             String       @id @default(cuid())
  title          String
  description    String
  startDate      DateTime
  endDate        DateTime
  location       String
  type           EventType
  kindergartenId String
  kindergarten   Kindergarten @relation(fields: [kindergartenId], references: [id], onDelete: Cascade)
  targetAudience UserType[]
  isAllDay       Boolean      @default(false)
  attendees      Attendee[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Attendee {
  id        String         @id @default(cuid())
  name      String
  type      UserType
  status    AttendeeStatus
  eventId   String
  event     Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

enum AlertType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum EventType {
  ACTIVITY
  HOLIDAY
  MEETING
  OTHER
}

enum UserType {
  ALL
  PARENT
  TEACHER
  ADMIN
  STUDENT
}

enum AttendeeStatus {
  PENDING
  ACCEPTED
  DECLINED
}
