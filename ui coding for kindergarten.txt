# Kindergarten UI File Structure

## Main Layout
```
src/app/(system)/kindergarten/[orgId]/
├── layout.tsx                   # Main layout for kindergarten pages
└── types.ts                     # Type definitions for kindergarten features
```
layout.tsx:
```
import { Sidebar } from "./_components/sidebar";

export default function KindergartenLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: { orgId: string };
}) {
  return (
    <div className="flex min-h-screen bg-gray-100">
      <Sidebar />
      <main className="flex-1 p-8">{children}</main>
    </div>
  );
}
```

types.ts:
```
import { Alert, Event } from "@prisma/client";

export interface ClassUtilization {
  id: string;
  name: string;
  capacity: number;
  studentCount: number;
  utilizationRate: number;
}

export interface DashboardStats {
  totalStudents: number;
  totalClasses: number;
  upcomingEvents: Event[];
  unreadAlerts: Alert[];
  classUtilization: ClassUtilization[];
  overallUtilization: number;
}

export interface Activity {
  type: 'EVENT' | 'ALERT';
  title: string;
  description: string;
  date: Date;
  data: Event | Alert;

}
```


## Dashboard Section
```
src/app/(system)/kindergarten/[orgId]/dashboard/
├── page.tsx                     # Dashboard main page
└── _components/
    ├── arrived-students-table.tsx   # Table showing arrived students
    ├── attendance-chart.tsx         # Attendance statistics chart
    ├── class-utilization.tsx        # Class utilization display
    ├── dashboard-stats.tsx          # Statistics overview
    └── dashboard-tabs.tsx           # Navigation tabs
```

page.tsx:
```
// kindergarten/[orgId]/dashboard/page.tsx
"use client";

import { useEffect, useState } from "react";
import { useParams } from "next/navigation";
import { DashboardTabs } from "./_components/dashboard-tabs";
import { Skeleton } from "@/components/ui/skeleton";
import { DashboardData } from "@/types/dashboard";

export default function DashboardPage() {
  const { orgId } = useParams();
  const [dashboardData, setDashboardData] = useState<DashboardData | null>(
    null
  );
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        const response = await fetch(`/api/kindergarten/${orgId}/dashboard`);
        const result = await response.json();
        if (result.data) {
          setDashboardData(result.data);
        }
      } catch (error) {
        console.error("Error fetching dashboard data:", error);
      } finally {
        setLoading(false);
      }
    };

    fetchDashboardData();
  }, [orgId]);

  if (loading) {
    return <DashboardSkeleton />;
  }

  return (
    <div className="p-6 space-y-6">
      <h1 className="text-2xl font-bold">Dashboard</h1>
      {dashboardData && <DashboardTabs data={dashboardData} />}
    </div>
  );
}

const DashboardSkeleton = () => (
  <div className="p-6 space-y-6">
    <Skeleton className="h-8 w-48" />
    <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
      {[...Array(4)].map((_, i) => (
        <Skeleton key={i} className="h-32" />
      ))}
    </div>
    <Skeleton className="h-[300px]" />
  </div>
);

```

arrived-students-table.tsx:
```
// kindergarten/[orgId]/dashboard/_components/arrived-students-table.tsx
"use client";

import { useState } from "react";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { format } from "date-fns";
import { AttendanceStatus } from "@prisma/client";

// Update the interface to match the API response
interface ArrivedStudent {
  id: string;
  name: string;
  class: string;
  arrivalTime: Date;
  status: AttendanceStatus;
}

interface ArrivedStudentsTableProps {
  students: ArrivedStudent[];
}

export const ArrivedStudentsTable = ({
  students,
}: ArrivedStudentsTableProps) => {
  const [search, setSearch] = useState("");
  const [statusFilter, setStatusFilter] = useState<string>("all");

  const filteredStudents = students.filter((student) => {
    const matchesSearch =
      student.name.toLowerCase().includes(search.toLowerCase()) ||
      student.class.toLowerCase().includes(search.toLowerCase());
    const matchesStatus =
      statusFilter === "all" || student.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const getStatusBadgeVariant = (status: AttendanceStatus) => {
    switch (status) {
      case AttendanceStatus.ON_TIME:
        return "positive";
      case AttendanceStatus.LATE:
        return "destructive";
      default:
        return "secondary";
    }
  };

  const getStatusDisplay = (status: AttendanceStatus) => {
    switch (status) {
      case AttendanceStatus.ON_TIME:
        return "On Time";
      case AttendanceStatus.LATE:
        return "Late";
      default:
        return status;
    }
  };

  return (
    <div className="space-y-4">
      <div className="flex flex-col sm:flex-row gap-4">
        <Input
          placeholder="Search students..."
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="max-w-xs"
        />
        <Select value={statusFilter} onValueChange={setStatusFilter}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Filter by status" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All</SelectItem>
            <SelectItem value={AttendanceStatus.ON_TIME}>On Time</SelectItem>
            <SelectItem value={AttendanceStatus.LATE}>Late</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Student</TableHead>
              <TableHead>Class</TableHead>
              <TableHead>Arrival Time</TableHead>
              <TableHead>Status</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {filteredStudents.map((student) => (
              <TableRow key={student.id}>
                <TableCell>
                  <div className="flex items-center gap-3">
                    <Avatar>
                      <AvatarFallback>
                        {student.name
                          .split(" ")
                          .map((n) => n[0])
                          .join("")}
                      </AvatarFallback>
                    </Avatar>
                    <span className="font-medium">{student.name}</span>
                  </div>
                </TableCell>
                <TableCell>{student.class}</TableCell>
                <TableCell>
                  {format(new Date(student.arrivalTime), "h:mm a")}
                </TableCell>
                <TableCell>
                  <Badge variant={getStatusBadgeVariant(student.status)}>
                    {getStatusDisplay(student.status)}
                  </Badge>
                </TableCell>
              </TableRow>
            ))}
            {filteredStudents.length === 0 && (
              <TableRow>
                <TableCell colSpan={4} className="text-center py-6">
                  No students found
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    </div>
  );
};

```

attendance-chart.tsx:
```
// kindergarten/[orgId]/dashboard/_components/attendance-chart.tsx
"use client";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import {
  ResponsiveContainer,
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  Legend,
} from "recharts";

interface AttendanceChartProps {
  data: {
    month: string;
    rate: number;
  }[];
}

export const AttendanceChart = ({ data }: AttendanceChartProps) => {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Attendance Trends (Last 6 Months)</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="h-[400px] w-full">
          <ResponsiveContainer width="100%" height="100%">
            <LineChart
              data={data}
              margin={{ top: 20, right: 20, left: 20, bottom: 20 }}
            >
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="month" tickLine={false} axisLine={false} />
              <YAxis
                tickLine={false}
                axisLine={false}
                tickFormatter={(value) => `${value}%`}
              />
              <Tooltip
                formatter={(value: number) => [
                  `${value.toFixed(1)}%`,
                  "Attendance Rate",
                ]}
              />
              <Legend />
              <Line
                type="monotone"
                dataKey="rate"
                name="Attendance Rate"
                stroke="#2563eb"
                strokeWidth={2}
                dot={{ r: 4 }}
                activeDot={{ r: 8 }}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </CardContent>
    </Card>
  );
};

```

class-utilization.tsx:
```
// kindergarten/[orgId]/dashboard/_components/class-utilization.tsx
"use client";

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { cn } from "@/lib/utils";

interface ClassUtilizationProps {
  data: {
    id: string;
    name: string;
    capacity: number;
    studentCount: number;
    utilizationRate: number;
  }[];
}

export const ClassUtilization = ({ data }: ClassUtilizationProps) => {
  return (
    <Card>
      <CardHeader>
        <CardTitle>Class Utilization</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {data.map((class_) => (
          <div key={class_.id} className="space-y-2">
            <div className="flex items-center justify-between">
              <div>
                <p className="font-medium">{class_.name}</p>
                <p className="text-sm text-muted-foreground">
                  {class_.studentCount} / {class_.capacity} students
                </p>
              </div>
              <span className="text-sm font-medium">
                {Math.round(class_.utilizationRate)}%
              </span>
            </div>
            <Progress
              value={class_.utilizationRate}
              className={cn(
                "h-2",
                class_.utilizationRate > 90
                  ? "bg-red-500"
                  : class_.utilizationRate > 75
                  ? "bg-yellow-500"
                  : "bg-green-500"
              )}
            />
          </div>
        ))}
      </CardContent>
    </Card>
  );
};

```

dashboard-stats.tsx:
```
// kindergarten/[orgId]/dashboard/_components/dashboard-stats.tsx
"use client";

import { Card, CardContent } from "@/components/ui/card";
import { cn, getColorClasses } from "@/lib/utils";
import { GraduationCap, Clock, Users, AlertTriangle } from "lucide-react";

interface StatCardProps {
  icon: React.ReactNode;
  label: string;
  value: string | number;
  color: "blue" | "yellow" | "green" | "red";
}

interface DashboardStatsProps {
  stats: {
    totalStudents: number;
    presentToday: number;
    lateToday: number;
    absentNoReason: number;
  };
}

export const DashboardStats = ({ stats }: DashboardStatsProps) => {
  const attendingPercentage = Math.round(
    (stats.presentToday / stats.totalStudents) * 100
  );

  return (
    <div className="grid grid-cols-2 gap-4 lg:grid-cols-4">
      <StatCard
        icon={<GraduationCap className="w-6 h-6 text-blue-600" />}
        label="Total Students"
        value={stats.totalStudents}
        color="blue"
      />
      <StatCard
        icon={<Clock className="w-6 h-6 text-yellow-600" />}
        label="Late Today"
        value={stats.lateToday}
        color="yellow"
      />
      <StatCard
        icon={<Users className="w-6 h-6 text-green-700" />}
        label="Attending Today"
        value={`${attendingPercentage}%`}
        color="green"
      />
      <StatCard
        icon={<AlertTriangle className="w-6 h-6 text-red-600" />}
        label="Absent No Reason"
        value={stats.absentNoReason}
        color="red"
      />
    </div>
  );
};

const StatCard: React.FC<StatCardProps> = ({ icon, label, value, color }) => (
  <Card className="bg-white">
    <CardContent className="p-4">
      <div className="flex items-center gap-4">
        <div className={cn("p-2 rounded", getColorClasses(color))}>{icon}</div>
        <div>
          <p className="text-sm text-muted-foreground">{label}</p>
          <p className="text-2xl font-bold">{value}</p>
        </div>
      </div>
    </CardContent>
  </Card>
);

```

dashboard-tabs.tsx:
```
// kindergarten/[orgId]/dashboard/_components/dashboard-tabs.tsx
"use client";

import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { DashboardStats } from "./dashboard-stats";
import { AttendanceChart } from "./attendance-chart";
import { ArrivedStudentsTable } from "./arrived-students-table";
import { ClassUtilization } from "./class-utilization";
import { AttendanceStatus } from "@prisma/client";

interface DashboardTabsProps {
  data: {
    stats: {
      totalStudents: number;
      presentToday: number;
      lateToday: number;
      absentNoReason: number;
    };
    classUtilization: {
      id: string;
      name: string;
      capacity: number;
      studentCount: number;
      utilizationRate: number;
    }[];
    attendanceChart: {
      month: string;
      rate: number;
    }[];
    arrivedStudents: {
      id: string;
      name: string;
      class: string;
      arrivalTime: Date;
      status: AttendanceStatus;
    }[];
    events: any[];
    alerts: any[];
  };
}

export function DashboardTabs({ data }: DashboardTabsProps) {
  return (
    <Tabs defaultValue="overview" className="space-y-6">
      <TabsList>
        <TabsTrigger value="overview">Overview</TabsTrigger>
        <TabsTrigger value="attendance">Attendance</TabsTrigger>
        <TabsTrigger value="classes">Classes</TabsTrigger>
      </TabsList>
      <TabsContent value="overview">
        <div className="grid gap-6">
          <DashboardStats stats={data.stats} />
          <div className="bg-white p-6 rounded-lg border">
            <ArrivedStudentsTable students={data.arrivedStudents} />
          </div>
        </div>
      </TabsContent>

      <TabsContent value="attendance">
        <AttendanceChart data={data.attendanceChart} />
      </TabsContent>

      <TabsContent value="classes">
        <ClassUtilization data={data.classUtilization} />
      </TabsContent>
    </Tabs>
  );
}

```




## Student Management
```
src/app/(system)/kindergarten/[orgId]/student-list/
├── page.tsx                     # Student list main page
├── [studentId]/                 # Individual student details
│   ├── page.tsx                # Student details page
│   └── _components/
│       ├── student-profile.tsx    # Student information display
│       ├── attendance-table.tsx 
│       └── alert-log-table.tsx   
└── _components/
    ├── columns.tsx              # Table columns definition
    └── student-list.tsx         # Student list component
```

page.tsx:
```
import { StudentList } from "./_components/student-list";
import { getStudents } from "@/actions/student";
import { Card, CardContent } from "@/components/ui/card";

interface StudentListPageProps {
  params: {
    orgId: string;
  };
}

export default async function StudentListPage({
  params,
}: StudentListPageProps) {
  const result = await getStudents(params.orgId);

  if (!result || result.error) {
    return (
      <div className="p-6">
        <Card>
          <CardContent className="py-10 text-center text-destructive">
            {result?.error || "Failed to load students"}
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="p-6">
      <StudentList students={result.data || []} />
    </div>
  );
}


```

columns.tsx:
```
"use client";
import { ColumnDef } from "@tanstack/react-table";
import { MoreHorizontal } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useRouter, useParams } from "next/navigation";

export type Student = {
  id: string;
  name: string;
  age: number;
  class: string;
  daysAbsent: number;
  attendancePerformance: string;
};

export const columns: ColumnDef<Student>[] = [
  {
    accessorKey: "name",
    header: "Students",
    cell: ({ row }) => {
      const router = useRouter();
      const params = useParams();
      const student = row.original;
      return (
        <div
          onClick={() =>
            router.push(
              `/kindergarten/${params.orgId}/student-list/${student.id}`
            )
          }
          className="flex items-center gap-2"
        >
          <Avatar>
            <AvatarFallback>{student.name[0]}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{student.name}</div>
            <div className="text-sm text-muted-foreground">{student.class}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "age",
    header: "Age",
  },
  {
    accessorKey: "class",
    header: "Class",
  },
  {
    accessorKey: "daysAbsent",
    header: () => <div className="text-center">Days Absent</div>,
    cell: ({ row }) => {
      return <div className="text-center">{row.getValue("daysAbsent")}</div>;
    },
  },
  {
    accessorKey: "attendancePerformance",
    header: () => <div className="text-center">Attendance Performance</div>,
    cell: ({ row }) => {
      return (
        <div className="text-center">
          {row.getValue("attendancePerformance")}
        </div>
      );
    },
  },
  {
    id: "actions",
    cell: ({ row }) => {
      const router = useRouter();
      const params = useParams();
      const student = row.original;
      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0">
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem
              onClick={() =>
                router.push(
                  `/kindergarten/${params.orgId}/student-list/${student.id}`
                )
              }
            >
              View Profile
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      );
    },
  },
];

```

student-list.tsx:
```
"use client";

import { DataTable } from "../../_components/data-table";
import { Student, columns } from "./columns";
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react";
import { Card, CardContent } from "@/components/ui/card";
import Link from "next/link";
import { useParams } from "next/navigation";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { useState } from "react";

interface StudentListProps {
  students: Student[];
}

export function StudentList({ students }: StudentListProps) {
  const params = useParams();
  const [selectedClass, setSelectedClass] = useState<string>("all");

  // Get unique classes
  const classes = Array.from(new Set(students.map((student) => student.class)));

  // Filter students by class
  const filteredStudents =
    selectedClass === "all"
      ? students
      : students.filter((student) => student.class === selectedClass);

  return (
    <Card>
      <CardContent className="p-6">
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-2xl font-semibold">Student List</h1>
        </div>

        <div className="flex items-center gap-4 mb-4">
          <div className="flex items-center gap-2">
            <span className="text-sm font-medium">Filter by Class:</span>
            <Select value={selectedClass} onValueChange={setSelectedClass}>
              <SelectTrigger className="w-[180px]">
                <SelectValue placeholder="Select class" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Classes</SelectItem>
                {classes.map((className) => (
                  <SelectItem key={className} value={className}>
                    {className}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
        </div>

        <DataTable
          columns={columns}
          data={filteredStudents}
          searchKey="name"
          showSearch={true}
        />
      </CardContent>
    </Card>
  );
}

```

[studentId]/page.tsx:
```
// app/(system)/kindergarten/[orgId]/student-list/[studentId]/page.tsx
"use client";

import { useStudent } from "@/hooks/useStudents";
import { StudentProfile } from "./_components/student-profile";
import { useParams } from "next/navigation";
import { Card, CardContent } from "@/components/ui/card";
import { Loader2 } from "lucide-react";

export default function StudentPage() {
  const params = useParams();
  const { data, isLoading, error } = useStudent(params.studentId as string);

  if (isLoading) {
    return (
      <div className="p-6">
        <Card>
          <CardContent className="py-10 text-center">
            <Loader2 className="w-8 h-8 animate-spin mx-auto" />
            <p className="text-muted-foreground mt-2">
              Loading student profile...
            </p>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-6">
        <Card>
          <CardContent className="py-10 text-center text-destructive">
            Failed to load student profile
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      <StudentProfile student={data.data} />
    </div>
  );
}

```

student-profile.tsx:
```
// src/app/kindergarten/[orgId]/student-list/[studentId]/_components/student-profile.tsx
"use client";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { AttendanceTable } from "./attendance-table";
import { AlertLogTable } from "./alert-log-table";

interface StudentProfileProps {
  student: any; // We'll type this properly later
}

export function StudentProfile({ student }: StudentProfileProps) {
  return (
    <>
      {/* Student Basic Info Card */}
      <Card>
        <CardContent className="p-6">
          <div className="flex items-start gap-6">
            <Avatar className="h-24 w-24">
              <AvatarFallback className="text-2xl">
                {student.fullName[0]}
              </AvatarFallback>
            </Avatar>
            <div className="space-y-1">
              <h2 className="text-2xl font-bold">{student.fullName}</h2>
              <div className="text-sm text-muted-foreground">
                {student.class.name}
              </div>
              <div className="text-sm">Age: {student.age} years old</div>
              <div className="flex items-center mt-4 space-x-4">
                <div className="text-sm">
                  <span className="text-muted-foreground">Days Absent:</span>{" "}
                  {student.daysAbsent}
                </div>
                <div className="text-sm">
                  <span className="text-muted-foreground">
                    Attendance Rate:
                  </span>{" "}
                  {calculateAttendanceRate(student.attendance)}%
                </div>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Tabs for Additional Information */}
      <Tabs defaultValue="attendance" className="w-full">
        <TabsList>
          <TabsTrigger value="attendance">Attendance History</TabsTrigger>
          <TabsTrigger value="alerts">Alert Logs</TabsTrigger>
          <TabsTrigger value="photos">Face Photos</TabsTrigger>
        </TabsList>

        <TabsContent value="attendance" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Attendance History</CardTitle>
            </CardHeader>
            <CardContent>
              <AttendanceTable attendance={student.attendance} />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="alerts" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Alert Logs</CardTitle>
            </CardHeader>
            <CardContent>
              <AlertLogTable alertLogs={student.alertLogs} />
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="photos" className="mt-6">
          <Card>
            <CardHeader>
              <CardTitle>Face Photos</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-3 gap-4">
                {student.faceImageFront && (
                  <img
                    src={student.faceImageFront}
                    alt="Front"
                    className="rounded-lg"
                  />
                )}
                {/* Add other face images similarly */}
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </>
  );
}

function calculateAttendanceRate(attendance: any[]) {
  if (!attendance || attendance.length === 0) return "100.0";

  const totalDays = attendance.length;
  const presentDays = attendance.filter(
    (record) => record.status === "ON_TIME" || record.status === "LATE"
  ).length;

  const rate = (presentDays / totalDays) * 100;
  return rate.toFixed(1); // Returns one decimal place
}


```

attendance-table.tsx:
```
// src/app/kindergarten/[orgId]/student-list/[studentId]/_components/attendance-table.tsx
"use client";
import { format } from "date-fns";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";

interface AttendanceTableProps {
  attendance: any[]; // Type this properly
}

export function AttendanceTable({ attendance }: AttendanceTableProps) {
  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Date</TableHead>
          <TableHead>Status</TableHead>
          <TableHead>Time Recorded</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {attendance.map((record) => (
          <TableRow key={record.id}>
            <TableCell>{format(record.date, "PPP")}</TableCell>
            <TableCell>
              <Badge
                variant={
                  record.status === "ON_TIME"
                    ? "positive"
                    : record.status === "LATE"
                    ? "warning"
                    : "negative"
                }
              >
                {record.status}
              </Badge>
            </TableCell>
            <TableCell>{format(record.timeRecorded, "p")}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
}

```

alert-log-table.tsx:
```
// src/app/kindergarten/[orgId]/student-list/[studentId]/_components/alert-log-table.tsx
"use client";
import { format } from "date-fns";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";

interface AlertLogTableProps {
  alertLogs: any[]; 
}

export function AlertLogTable({ alertLogs }: AlertLogTableProps) {
  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Date</TableHead>
          <TableHead>Alert Type</TableHead>
          <TableHead>Parent Action</TableHead>
          <TableHead>Reason</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {alertLogs.map((log) => (
          <TableRow key={log.id}>
            <TableCell>{format(log.alertTime, "PPP")}</TableCell>
            <TableCell>
              <Badge
                variant={log.alertType === "CALLED" ? "negative" : "warning"}
              >
                {log.alertType}
              </Badge>
            </TableCell>
            <TableCell>
              <Badge
                variant={
                  log.parentAction === "RESPONDED" ? "positive" : "negative"
                }
              >
                {log.parentAction}
              </Badge>
            </TableCell>
            <TableCell>{log.reason || "N/A"}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
}


```



## Class Management
```
src/app/(system)/kindergarten/[orgId]/classes/
├── page.tsx                     # Classes main page
├── [classId]/                   # Individual class management
│   ├── page.tsx                # Class details page
│   ├── edit/                   # Edit class section
│   │   └── page.tsx           # Edit class page
│   └── _components/           
│       ├── class-info.tsx     # Class information display
│       └── student-list.tsx   # Class students list
└── _components/
    ├── add-class-dialog.tsx    # Class creation dialog (legacy)
    ├── create-class-dialog.tsx # New class creation dialog
    ├── class-card.tsx         # Individual class card component
    └── class-list.tsx         # Class list display
```

page.tsx:
```
// src/app/kindergarten/[orgId]/student-list/[studentId]/_components/alert-log-table.tsx
"use client";
import { format } from "date-fns";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";

interface AlertLogTableProps {
  alertLogs: any[];
}

export function AlertLogTable({ alertLogs }: AlertLogTableProps) {
  return (
    <Table>
      <TableHeader>
        <TableRow>
          <TableHead>Date</TableHead>
          <TableHead>Alert Type</TableHead>
          <TableHead>Parent Action</TableHead>
          <TableHead>Reason</TableHead>
        </TableRow>
      </TableHeader>
      <TableBody>
        {alertLogs.map((log) => (
          <TableRow key={log.id}>
            <TableCell>{format(log.alertTime, "PPP")}</TableCell>
            <TableCell>
              <Badge
                variant={log.alertType === "CALLED" ? "negative" : "warning"}
              >
                {log.alertType}
              </Badge>
            </TableCell>
            <TableCell>
              <Badge
                variant={
                  log.parentAction === "RESPONDED" ? "positive" : "negative"
                }
              >
                {log.parentAction}
              </Badge>
            </TableCell>
            <TableCell>{log.reason || "N/A"}</TableCell>
          </TableRow>
        ))}
      </TableBody>
    </Table>
  );
}

```

add-class-dialog.tsx:
```
"use client";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Plus } from "lucide-react";
import { toast } from "sonner";
import { ClassSchemaType, ClassSchema } from "@/actions/class/schema";
import { createClass } from "@/actions/class";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

import { Class } from "../types";

interface AddClassDialogProps {
  onAdd?: (newClass: Class) => void;
}

export function AddClassDialog({ onAdd }: AddClassDialogProps) {
  const [open, setOpen] = useState(false);
  const [loading, setLoading] = useState(false);

  const form = useForm<ClassSchemaType>({
    resolver: zodResolver(ClassSchema),
    defaultValues: {
      name: "",
      capacity: 25,
    },
  });

  const onSubmit = async (data: ClassSchemaType) => {
    try {
      setLoading(true);
      const response = await createClass(data);

      if (response.error) {
        toast.error(response.error);
        return;
      }

      toast.success("Class created successfully");
      if (onAdd) {
        if (response.data) {
          onAdd({ ...response.data, studentCount: 0 });
        }
      }
      setOpen(false);
      form.reset();
    } catch (error) {
      toast.error("Something went wrong");
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button>
          <Plus className="mr-2 h-4 w-4" />
          Add Class
        </Button>
      </DialogTrigger>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Add New Class</DialogTitle>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Class Name</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g., 5 Kenyala" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="capacity"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Student Capacity</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      {...field}
                      onChange={(e) => field.onChange(Number(e.target.value))}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="flex justify-end space-x-4 pt-4">
              <Button
                variant="outline"
                onClick={() => setOpen(false)}
                type="button"
              >
                Cancel
              </Button>
              <Button type="submit" disabled={loading}>
                {loading ? "Creating..." : "Create Class"}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}

```

class-card.tsx:
```
"use client";
import { useParams, useRouter } from "next/navigation";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { MoreVertical } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Badge } from "@/components/ui/badge";
import { toast } from "sonner";
import { Class } from "../types";

interface ClassCardProps {
  class_: Class;
  onDelete: (id: string) => void;
}

export function ClassCard({ class_, onDelete }: ClassCardProps) {
  const router = useRouter();
  const params = useParams();

  const handleDelete = () => {
    if (window.confirm("Are you sure you want to delete this class?")) {
      onDelete(class_.id);
      toast.success("Class deleted successfully");
    }
  };

  return (
    <Card>
      <CardContent className="p-6">
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-lg font-semibold">{class_.name}</h3>
            <div className="flex items-center gap-2">
              <Badge
                variant={
                  class_.studentCount >= class_.capacity
                    ? "destructive"
                    : "secondary"
                }
              >
                {class_.studentCount}/{class_.capacity} Students
              </Badge>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="ghost" className="h-8 w-8 p-0">
                    <MoreVertical className="h-4 w-4" />
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                  <DropdownMenuItem
                    onClick={() =>
                      router.push(
                        `/kindergarten/${params.orgId}/classes/${class_.id}/edit`
                      )
                    }
                  >
                    Edit Class
                  </DropdownMenuItem>
                  <DropdownMenuItem
                    onClick={handleDelete}
                    className="text-red-600"
                  >
                    Delete Class
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
          <div className="space-y-2">
            <div className="text-sm text-muted-foreground">Capacity Usage</div>
            <div className="h-2 bg-secondary rounded-full overflow-hidden">
              <div
                className="h-full bg-primary transition-all"
                style={{
                  width: `${(class_.studentCount / class_.capacity) * 100}%`,
                }}
              />
            </div>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}

```

class-list.tsx:
```
"use client";

import { useState } from "react";
import { Search } from "lucide-react";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Skeleton } from "@/components/ui/skeleton";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Pencil, Trash2, Users } from "lucide-react";
import Link from "next/link";
import { useParams } from "next/navigation";
import { Progress } from "@/components/ui/progress";

interface Class {
  id: string;
  name: string;
  capacity: number;
  studentCount: number;
}

interface ClassListProps {
  classes: Class[];
  onDelete: (id: string) => void;
  isLoading: boolean;
}

export function ClassList({ classes, onDelete, isLoading }: ClassListProps) {
  const params = useParams();
  const [search, setSearch] = useState("");
  const [sortBy, setSortBy] = useState("name");

  if (isLoading) {
    return (
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {[1, 2, 3].map((i) => (
          <Skeleton key={i} className="h-[200px] w-full" />
        ))}
      </div>
    );
  }

  const filteredClasses = classes
    .filter((c) => c.name.toLowerCase().includes(search.toLowerCase()))
    .sort((a, b) => {
      switch (sortBy) {
        case "name":
          return a.name.localeCompare(b.name);
        case "capacity":
          return b.capacity - a.capacity;
        case "utilization":
          return b.studentCount / b.capacity - a.studentCount / a.capacity;
        default:
          return 0;
      }
    });

  return (
    <div className="space-y-6">
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="flex-1">
          <div className="relative">
            <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search classes..."
              className="pl-8 bg-white"
              value={search}
              onChange={(e) => setSearch(e.target.value)}
            />
          </div>
        </div>
        <Select defaultValue="name" onValueChange={setSortBy}>
          <SelectTrigger className="w-[180px]">
            <SelectValue placeholder="Sort by..." />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="name">Name</SelectItem>
            <SelectItem value="capacity">Capacity</SelectItem>
            <SelectItem value="utilization">Utilization</SelectItem>
          </SelectContent>
        </Select>
      </div>

      {filteredClasses.length === 0 ? (
        <div className="text-center text-muted-foreground py-10">
          No classes found
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {filteredClasses.map((class_) => (
            <Card key={class_.id}>
              <CardHeader className="pb-4">
                <div className="flex items-center justify-between">
                  <h3 className="text-lg font-semibold">{class_.name}</h3>
                  <div className="flex gap-2">
                    <Button variant="ghost" size="icon" asChild>
                      <Link
                        href={`/kindergarten/${params.orgId}/classes/${class_.id}/edit`}
                      >
                        <Pencil className="w-4 h-4" />
                      </Link>
                    </Button>
                    <Button
                      variant="ghost"
                      size="icon"
                      onClick={() => onDelete(class_.id)}
                      disabled={class_.studentCount > 0}
                    >
                      <Trash2 className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent className="pb-4">
                <div className="space-y-4">
                  <div className="flex items-center gap-2 text-muted-foreground">
                    <Users className="w-4 h-4" />
                    <span>
                      {class_.studentCount} / {class_.capacity} students
                    </span>
                  </div>
                  <Progress
                    value={(class_.studentCount / class_.capacity) * 100}
                    className="h-2"
                  />
                </div>
              </CardContent>
              <CardFooter>
                <div className="w-full flex justify-between items-center text-sm text-muted-foreground">
                  <span>
                    {Math.round((class_.studentCount / class_.capacity) * 100)}%
                    Full
                  </span>
                  <span>
                    {class_.capacity - class_.studentCount} spots remaining
                  </span>
                </div>
              </CardFooter>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}

```

create-class-dialog.tsx:
```
"use client";

import { useState } from "react";
import { useParams } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { ClassSchema, ClassSchemaType } from "@/actions/class/schema";
import { createClass } from "@/actions/class";
import { toast } from "sonner";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

interface CreateClassDialogProps {
  open: boolean;
  onClose: () => void;
  onSuccess: () => void;
}

export function CreateClassDialog({
  open,
  onClose,
  onSuccess,
}: CreateClassDialogProps) {
  const params = useParams();
  const [loading, setLoading] = useState(false);

  const form = useForm<ClassSchemaType>({
    resolver: zodResolver(ClassSchema),
    defaultValues: {
      name: "",
      capacity: 25,
      kindergartenId: params.orgId as string,
    },
  });

  const onSubmit = async (data: ClassSchemaType) => {
    try {
      setLoading(true);
      const result = await createClass(data);

      if (result.error) {
        toast.error(result.error);
        return;
      }

      toast.success("Class created successfully");
      form.reset();
      onSuccess();
    } catch (error) {
      toast.error("Something went wrong");
    } finally {
      setLoading(false);
    }
  };

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent>
        <DialogHeader>
          <DialogTitle>Create New Class</DialogTitle>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Class Name</FormLabel>
                  <FormControl>
                    <Input placeholder="e.g. 5 Kenyala" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <FormField
              control={form.control}
              name="capacity"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Student Capacity</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      min={1}
                      max={40}
                      {...field}
                      onChange={(e) => field.onChange(Number(e.target.value))}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="flex justify-end gap-4 pt-4">
              <Button type="button" variant="outline" onClick={onClose}>
                Cancel
              </Button>
              <Button type="submit" disabled={loading}>
                {loading ? "Creating..." : "Create Class"}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}


```

[classId]/edit:
```
"use client";

import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { toast } from "sonner";
import { useRouter } from "next/navigation";
import {
  UpdateClassSchemaType,
  UpdateClassSchema,
} from "@/actions/class/schema";
import { getClass, updateClass } from "@/actions/class";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Loader2 } from "lucide-react";

interface EditClassPageProps {
  params: {
    classId: string;
    orgId: string;
  };
}

export default function EditClassPage({ params }: EditClassPageProps) {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [isInitializing, setIsInitializing] = useState(true);

  const form = useForm<UpdateClassSchemaType>({
    resolver: zodResolver(UpdateClassSchema),
    defaultValues: {
      id: params.classId,
      name: "",
      capacity: 25,
      kindergartenId: params.orgId,
    },
  });

  // Fetch class data when component mounts
  useEffect(() => {
    const fetchClass = async () => {
      try {
        const response = await getClass(params.classId);
        if (response.error || !response.data) {
          toast.error(response.error || "No data found");
          return;
        }

        // Update form with fetched data
        form.reset({
          id: params.classId,
          name: response.data.name,
          capacity: response.data.capacity,
          kindergartenId: params.orgId,
        });
      } catch (error) {
        toast.error("Failed to fetch class details");
        router.push(`/kindergarten/${params.orgId}/classes`);
      } finally {
        setIsInitializing(false);
      }
    };

    fetchClass();
  }, [params.classId, params.orgId]);

  const onSubmit = async (data: UpdateClassSchemaType) => {
    try {
      setLoading(true);
      const response = await updateClass({
        ...data,
        kindergartenId: params.orgId,
      });

      if (response.error) {
        toast.error(response.error);
        return;
      }

      toast.success("Class updated successfully");
      router.push(`/kindergarten/${params.orgId}/classes`);
    } catch (error) {
      toast.error("Something went wrong");
    } finally {
      setLoading(false);
    }
  };

  //Loading state
  if (isInitializing) {
    return (
      <div className="container mx-auto py-10">
        <Card>
          <CardContent className="pt-6 text-center">
            <div className="space-y-4">
              <Loader2 className="h-6 w-6 animate-spin mx-auto" />
              <p className="text-sm text-muted-foreground">
                Loading class details...
              </p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto py-10">
      <Card>
        <CardHeader>
          <CardTitle>Edit Class</CardTitle>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Class Name</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g., 5 Kenyala" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="capacity"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Student Capacity</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        min={1}
                        max={40}
                        {...field}
                        onChange={(e) => field.onChange(Number(e.target.value))}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <div className="flex justify-end space-x-4 pt-4">
                <Button
                  variant="outline"
                  onClick={() => router.back()}
                  type="button"
                  disabled={loading}
                >
                  Cancel
                </Button>
                <Button type="submit" disabled={loading}>
                  {loading ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Saving...
                    </>
                  ) : (
                    "Save Changes"
                  )}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}

```


## Event Management
```
src/app/(system)/kindergarten/[orgId]/events/
├── page.tsx                     # Events main page
│   └── _components/
│       ├── event-card.tsx      # Individual event card component
│       ├── event-form-dialog.tsx # Event creation/edit dialog
│       └── multi-select.tsx     # Multi-select component for event audience
```

page.tsx:
```
// app/(system)/kindergarten/[orgId]/events/page.tsx
"use client";

import { useParams } from "next/navigation";
import { EventCard } from "./_components/event-card";
import { Calendar, Loader2, TriangleAlert } from "lucide-react";
import { Separator } from "@/components/ui/separator";
import { EventFormDialog } from "./_components/event-form-dialog";
import { Event, useClasses, useEvents } from "@/hooks/useEvents";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";

export default function EventsPage() {
  const { orgId } = useParams();

  const {
    data: events,
    isLoading: eventsLoading,
    error: eventsError,
  } = useEvents(orgId as string);

  const {
    data: classes,
    isLoading: classesLoading,
    error: classesError,
  } = useClasses(orgId as string);

  // Combined loading state
  if (eventsLoading || classesLoading) {
    return (
      <div className="p-6">
        <div className="flex items-center justify-between mb-6">
          <h1 className="text-2xl font-bold">Events</h1>
        </div>
        <Card>
          <CardContent className="py-6 text-center text-muted-foreground">
            <Loader2 className="h-4 w-4 animate-spin text-muted-foreground" />
            <span>Loading events...</span>
          </CardContent>
        </Card>
      </div>
    );
  }

  // Combined Error State
  if (eventsError || classesError) {
    return (
      <div className="p-6">
        <Card>
          <CardContent className="py-6 text-center text-destructive">
            <TriangleAlert className="h-8 w-8 mx-auto mb-2" />
            <p>Failed to load data. Please try again later.</p>
            <Button
              variant="outline"
              onClick={() => window.location.reload()}
              className="mt-4"
            >
              Retry
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  const hasNoEvents = !events?.upcoming.length && !events?.past.length;

  return (
    <div className="space-y-6 p-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">Events</h1>
        <EventFormDialog classes={classes || []} />
      </div>

      {hasNoEvents ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-10 text-center">
            <Calendar className="h-10 w-10 text-muted-foreground mb-4" />
            <h3 className="font-medium text-lg mb-2">No events found</h3>
            <p className="text-muted-foreground mb-4">
              There are no events scheduled. Create your first event to get
              started.
            </p>
            <EventFormDialog classes={classes || []} />
          </CardContent>
        </Card>
      ) : (
        <div className="space-y-6">
          <div>
            <h2 className="text-lg font-semibold mb-4">Upcoming Events</h2>
            {events?.upcoming.length === 0 ? (
              <Card>
                <CardContent className="py-6 text-center text-muted-foreground">
                  No upcoming events scheduled
                </CardContent>
              </Card>
            ) : (
              <div className="grid gap-4">
                {events?.upcoming.map((event: Event) => (
                  <EventCard
                    key={event.id}
                    title={event.title}
                    dateTime={new Date(event.startDate).toLocaleDateString()}
                    location={event.location}
                    cost={0}
                    description={event.description}
                  />
                ))}
              </div>
            )}
          </div>

          {events?.past.length > 0 && (
            <div>
              <Separator className="my-6" />
              <h2 className="text-lg font-semibold mb-4">Past Events</h2>
              <div className="grid gap-4">
                {events.past.map((event) => (
                  <EventCard
                    key={event.id}
                    title={event.title}
                    dateTime={new Date(event.startDate).toLocaleDateString()}
                    location={event.location}
                    cost={0}
                    description={event.description}
                  />
                ))}
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}

```

event-card.tsx:
```
"use client";
import { CalendarDays, MapPin, DollarSign, Clock } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

type EventCardProps = {
  title: string;
  dateTime: string;
  location: string;
  cost: number;
  description: string;
  teacherInCharge?: string;
};

export const EventCard = ({
  title,
  dateTime,
  location,
  cost,
  description,
  teacherInCharge,
}: EventCardProps) => {
  return (
    <Card>
      <CardContent className="pt-6">
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Avatar>
                <AvatarFallback>{title[0]}</AvatarFallback>
              </Avatar>
              <div>
                <h3 className="font-semibold text-lg">{title}</h3>
                <div className="flex items-center text-sm text-muted-foreground">
                  <CalendarDays className="mr-2 h-4 w-4" />
                  {dateTime}
                </div>
              </div>
            </div>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" className="h-8 w-8 p-0">
                  <span className="sr-only">Open menu</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="24"
                    height="24"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="h-4 w-4"
                  >
                    <circle cx="12" cy="12" r="1" />
                    <circle cx="19" cy="12" r="1" />
                    <circle cx="5" cy="12" r="1" />
                  </svg>
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem>Edit Event</DropdownMenuItem>
                <DropdownMenuItem className="text-red-600">
                  Delete Event
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </div>

          <p className="text-sm text-muted-foreground">{description}</p>

          <div className="grid grid-cols-2 gap-4 pt-4">
            <div className="flex items-center text-sm">
              <MapPin className="mr-2 h-4 w-4" />
              {location}
            </div>
            <div className="flex items-center text-sm">
              <DollarSign className="mr-2 h-4 w-4" />
              RM {cost.toFixed(2)}
            </div>
          </div>

          {teacherInCharge && (
            <div className="pt-4 border-t">
              <p className="text-sm text-muted-foreground">
                Teacher in charge:
              </p>
              <p className="text-sm font-medium">{teacherInCharge}</p>
            </div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};


```

event-form-dialog.tsx:
```
// src/app/kindergarten/[orgId]/events/_components/event-form-dialog.tsx
"use client";

import { useState } from "react";
import { useParams } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { format } from "date-fns";
import { EventSchema, EventSchemaType } from "@/actions/event/schema";
import { toast } from "sonner";
import { useCreateEvent } from "@/hooks/useEvents";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { MultiSelect } from "./multi-select";

interface EventFormDialogProps {
  classes: { id: string; name: string }[];
}

export function EventFormDialog({ classes }: EventFormDialogProps) {
  const { orgId } = useParams();
  const [open, setOpen] = useState(false);

  const createEventMutation = useCreateEvent();

  const form = useForm<EventSchemaType>({
    resolver: zodResolver(EventSchema),
    defaultValues: {
      title: "",
      description: "",
      location: "",
      type: "ACTIVITY",
      targetAudience: ["ALL"],
      startDate: new Date(),
      endDate: new Date(),
      isAllDay: false,
      kindergartenId: orgId as string,
    },
  });

  const onSubmit = async (data: EventSchemaType) => {
    createEventMutation.mutate(data, {
      onSuccess: () => {
        setOpen(false);
        form.reset();
        toast.success("Event created successfully");
      },
      onError: (error) => {
        toast.error(error.message || "Failed to create event");
      },
    });
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button>Create Event</Button>
      </DialogTrigger>
      <DialogContent className="max-w-2xl overflow-visible">
        <DialogHeader>
          <DialogTitle>Create New Event</DialogTitle>
        </DialogHeader>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <FormField
              control={form.control}
              name="title"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Title</FormLabel>
                  <FormControl>
                    <Input placeholder="Event title" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />
            <div className="grid grid-cols-2 gap-4">
              <FormField
                control={form.control}
                name="startDate"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Start Date</FormLabel>
                    <FormControl>
                      <Input
                        type="date"
                        value={
                          field.value ? format(field.value, "yyyy-MM-dd") : ""
                        }
                        onChange={(e) =>
                          field.onChange(new Date(e.target.value))
                        }
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="endDate"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>End Date</FormLabel>
                    <FormControl>
                      <Input
                        type="date"
                        value={
                          field.value ? format(field.value, "yyyy-MM-dd") : ""
                        }
                        onChange={(e) =>
                          field.onChange(new Date(e.target.value))
                        }
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>

            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Description</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Event description"
                      {...field}
                      rows={4}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="location"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Location</FormLabel>
                  <FormControl>
                    <Input placeholder="Event location" {...field} />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="targetAudience"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Target Audience</FormLabel>
                  <FormControl>
                    <MultiSelect
                      options={[
                        { value: "ALL", label: "All" },
                        { value: "PARENT", label: "Parents" },
                        { value: "TEACHER", label: "Teachers" },
                        { value: "STUDENT", label: "Students" },
                      ]}
                      selected={field.value}
                      onChange={field.onChange}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <div className="flex justify-end space-x-4">
              <Button
                variant="outline"
                onClick={() => setOpen(false)}
                type="button"
                disabled={createEventMutation.isPending}
              >
                Cancel
              </Button>
              <Button type="submit" disabled={createEventMutation.isPending}>
                {createEventMutation.isPending ? "Creating..." : "Create Event"}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}


```

multi-select.tsx:
```
"use client";
import * as React from "react";
import {
  Select,
  SelectContent,
  SelectGroup,
  SelectItem,
  SelectLabel,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { X } from "lucide-react";

export type Option = {
  value: string;
  label: string;
};

interface MultiSelectProps {
  options: Option[];
  selected: string[];
  onChange: (values: string[]) => void;
  className?: string;
}

export function MultiSelect({
  options,
  selected,
  onChange,
  className,
}: MultiSelectProps) {
  const handleSelect = (value: string) => {
    if (selected.includes(value)) {
      onChange(selected.filter((item) => item !== value));
    } else {
      onChange([...selected, value]);
    }
  };

  const handleUnselect = (value: string) => {
    onChange(selected.filter((item) => item !== value));
  };

  return (
    <div className="space-y-2">
      <div className="flex flex-wrap gap-1">
        {selected.map((value) => (
          <Badge
            key={value}
            variant="secondary"
            onClick={() => handleUnselect(value)}
          >
            {options.find((opt) => opt.value === value)?.label}
            <button
              className="ml-1 ring-offset-background rounded-full outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2"
              onClick={(e) => {
                e.stopPropagation();
                handleUnselect(value);
              }}
            >
              <X className="h-3 w-3" />
            </button>
          </Badge>
        ))}
      </div>
      <Select onValueChange={handleSelect}>
        <SelectTrigger className="w-full">
          <SelectValue placeholder="Select classes" />
        </SelectTrigger>
        <SelectContent>
          <ScrollArea className="h-[200px]">
            <SelectGroup>
              <SelectLabel>Classes</SelectLabel>
              {options.map((option) => (
                <SelectItem
                  key={option.value}
                  value={option.value}
                  disabled={selected.includes(option.value)}
                >
                  {option.label}
                </SelectItem>
              ))}
            </SelectGroup>
          </ScrollArea>
        </SelectContent>
      </Select>
    </div>
  );
}


```




## Alert Management
```
src/app/(system)/kindergarten/[orgId]/alert-list/
├── page.tsx                     # Alerts main page
└── _components/alert-table/
    ├── awaiting-columns.tsx          # Alert list display
    └── responded-columns.tsx  # Alert creation dialog
```

page.tsx:
```
// app/kindergarten/[orgId]/alert-list/page.tsx
"use client";

import { AlertList } from "../_components/alert-list";
import { useAlerts } from "@/hooks/useAlerts";
import { Card, CardContent } from "@/components/ui/card";
import { Loader2 } from "lucide-react";

export default function AlertListPage({
  params,
}: {
  params: { orgId: string };
}) {
  const { data, isLoading, error } = useAlerts(params.orgId);

  if (isLoading) {
    return (
      <div className="p-6">
        <Card>
          <CardContent className="py-10 text-center">
            <Loader2 className="w-8 h-8 animate-spin mx-auto" />
            <p className="text-muted-foreground mt-2">Loading alerts...</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-6">
        <Card>
          <CardContent className="py-10 text-center text-destructive">
            Failed to load alerts
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="p-6">
      <AlertList
        respondedData={data?.responded || []}
        awaitingData={data?.awaiting || []}
      />
    </div>
  );
}


```

awaiting-columns.tsx:
```
"use client";
import { ColumnDef } from "@tanstack/react-table";
import { AlertStudent } from "@/types/alert";
import { Button } from "@/components/ui/button";
import { MoreHorizontal, Phone } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

export const awaitingColumns: ColumnDef<AlertStudent>[] = [
  {
    accessorKey: "name",
    header: "Students",
    cell: ({ row }) => {
      const student = row.original;
      return (
        <div className="flex items-center gap-2">
          <Avatar>
            <AvatarFallback>{student.name[0]}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{student.name}</div>
            <div className="text-sm text-muted-foreground">{student.class}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "attendancePerformance",
    header: "Attendance Performance",
  },
  {
    id: "callParent",
    cell: ({ row }) => {
      return (
        <Button variant="secondary" size="sm">
          <Phone className="mr-2 h-4 w-4" />
          Call Parent
        </Button>
      );
    },
  },
  {
    id: "actions",
    cell: ({ row }) => {
      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0">
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuItem>Edit</DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      );
    },
  },
];


```

responded-columns.tsx:
```
"use client";
import { ColumnDef } from "@tanstack/react-table";
import { AlertStudent } from "@/types/alert";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";

export const respondedColumns: ColumnDef<AlertStudent>[] = [
  {
    accessorKey: "name",
    header: "Students",
    cell: ({ row }) => {
      const student = row.original;
      return (
        <div className="flex items-center gap-2">
          <Avatar>
            <AvatarFallback>{student.name[0]}</AvatarFallback>
          </Avatar>
          <div>
            <div className="font-medium">{student.name}</div>
            <div className="text-sm text-muted-foreground">{student.class}</div>
          </div>
        </div>
      );
    },
  },
  {
    accessorKey: "attendancePerformance",
    header: "Attendance Performance",
  },
  {
    accessorKey: "reason",
    header: "Reason",
  },
];


```


## Settings
```
src/app/(system)/kindergarten/[orgId]/settings/
├── page.tsx                     # Settings main page

```

page.tsx:
```
"use client";

import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { toast } from "sonner";
import { DayOfWeek } from "@prisma/client";
import {
  KindergartenSettingsSchemaType,
  KindergartenSettingsSchema,
} from "@/actions/kindergarten/schema";
import { getSettings, updateSettings } from "@/actions/settings";
import { getKindergarten, updateKindergarten } from "@/actions/kindergarten";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  FormDescription,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Building2, Clock, Bell, Save, Loader2 } from "lucide-react";

interface SettingsPageProps {
  params: {
    orgId: string;
  };
}

const formatTime = (date: Date) => {
  return date.toLocaleTimeString("en-US", {
    hour: "2-digit",
    minute: "2-digit",
    hour12: false,
  });
};

const dayNames: Record<DayOfWeek, string> = {
  MONDAY: "Monday",
  TUESDAY: "Tuesday",
  WEDNESDAY: "Wednesday",
  THURSDAY: "Thursday",
  FRIDAY: "Friday",
  SATURDAY: "Saturday",
  SUNDAY: "Sunday",
};

export default function SettingsPage({ params }: SettingsPageProps) {
  const [loading, setLoading] = useState(false);
  const [isInitializing, setIsInitializing] = useState(true); // Add this
  const [activeTab, setActiveTab] = useState("general");

  const form = useForm<KindergartenSettingsSchemaType>({
    resolver: zodResolver(KindergartenSettingsSchema),
    defaultValues: {
      id: params.orgId,
      name: "",
      address: "",
      messageAlertThreshold: "09:00",
      callAlertThreshold: "10:00",
      operatingHours: Object.values(DayOfWeek).map((day) => ({
        dayOfWeek: day,
        startTime: "08:00",
        endTime: "17:00",
      })),
    },
  });

  useEffect(() => {
    let isMounted = true; // Add this

    async function loadSettings() {
      try {
        const result = await getSettings(params.orgId);

        if (!isMounted) return; // Check if still mounted

        if (result.error) {
          toast.error(result.error);
          return;
        }

        const settings = result.data;
        if (!settings) {
          toast.error("Failed to load settings");
          return;
        }

        const formattedData = {
          id: settings.id,
          name: settings.name,
          address: settings.address,
          messageAlertThreshold: formatTime(settings.messageAlertThreshold),
          callAlertThreshold: formatTime(settings.callAlertThreshold),
          operatingHours: settings.operatingHours.map((oh) => ({
            dayOfWeek: oh.dayOfWeek,
            startTime: formatTime(oh.startTime),
            endTime: formatTime(oh.endTime),
          })),
        };

        form.reset(formattedData);
      } catch (error) {
        if (!isMounted) return; // Check if still mounted
        console.error("Error loading settings:", error);
        toast.error("Failed to load settings");
      } finally {
        if (isMounted) {
          // Check if still mounted
          setIsInitializing(false);
        }
      }
    }

    loadSettings();

    // Cleanup function
    return () => {
      isMounted = false;
    };
  }, [params.orgId]);

  // Add loading state UI
  if (isInitializing) {
    return (
      <div className="p-6 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="h-6 w-6 animate-spin mx-auto" />
          <p className="mt-2 text-sm text-muted-foreground">
            Loading settings...
          </p>
        </div>
      </div>
    );
  }

  const onSubmit = async (data: KindergartenSettingsSchemaType) => {
    try {
      setLoading(true);
      const result = await updateKindergarten(data);

      if (result.error) {
        toast.error(result.error);
        return;
      }

      toast.success("Settings updated successfully");
    } catch (error) {
      console.error("Error updating settings:", error);
      toast.error("Failed to update settings");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-6 max-w-5xl mx-auto">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-2xl font-bold">Settings</h1>
          <p className="text-muted-foreground">
            Manage your kindergarten settings
          </p>
        </div>
        <Button
          onClick={form.handleSubmit(onSubmit)}
          disabled={loading}
          size="lg"
        >
          {loading ? (
            "Saving..."
          ) : (
            <>
              <Save className="w-4 h-4 mr-2" />
              Save Changes
            </>
          )}
        </Button>
      </div>

      <Tabs
        defaultValue="general"
        className="space-y-6"
        onValueChange={setActiveTab}
      >
        <TabsList className="grid grid-cols-3 w-full max-w-2xl">
          <TabsTrigger value="general" className="flex items-center gap-2">
            <Building2 className="w-4 h-4" />
            General
          </TabsTrigger>
          <TabsTrigger
            value="operating-hours"
            className="flex items-center gap-2"
          >
            <Clock className="w-4 h-4" />
            Operating Hours
          </TabsTrigger>
          <TabsTrigger value="alerts" className="flex items-center gap-2">
            <Bell className="w-4 h-4" />
            Alerts
          </TabsTrigger>
        </TabsList>

        <Form {...form}>
          <form className="space-y-6">
            <TabsContent value="general">
              <Card>
                <CardHeader>
                  <CardTitle>General Information</CardTitle>
                  <CardDescription>
                    Basic details about your kindergarten
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <FormField
                    control={form.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Kindergarten Name</FormLabel>
                        <FormControl>
                          <Input
                            {...field}
                            placeholder="Enter kindergarten name"
                          />
                        </FormControl>
                        <FormDescription>
                          This name will be displayed to parents and staff
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  <FormField
                    control={form.control}
                    name="address"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Address</FormLabel>
                        <FormControl>
                          <Input {...field} placeholder="Enter full address" />
                        </FormControl>
                        <FormDescription>
                          Physical location of your kindergarten
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="operating-hours">
              <Card>
                <CardHeader>
                  <CardTitle>Operating Hours</CardTitle>
                  <CardDescription>
                    Set your kindergarten's operating hours for each day
                  </CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-6">
                    {form.watch("operatingHours").map((oh, index) => (
                      <div
                        key={index}
                        className="grid gap-6 p-4 rounded-lg border bg-card"
                      >
                        <div className="flex items-center justify-between">
                          <h3 className="font-semibold">
                            {dayNames[oh.dayOfWeek]}
                          </h3>
                        </div>
                        <div className="grid grid-cols-2 gap-4">
                          <FormField
                            control={form.control}
                            name={`operatingHours.${index}.startTime`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Opening Time</FormLabel>
                                <FormControl>
                                  <Input type="time" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          <FormField
                            control={form.control}
                            name={`operatingHours.${index}.endTime`}
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Closing Time</FormLabel>
                                <FormControl>
                                  <Input type="time" {...field} />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="alerts">
              <Card>
                <CardHeader>
                  <CardTitle>Alert Settings</CardTitle>
                  <CardDescription>
                    Configure when to send alerts to parents
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  <div className="grid gap-6">
                    <FormField
                      control={form.control}
                      name="messageAlertThreshold"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Message Alert Time</FormLabel>
                          <FormControl>
                            <Input type="time" {...field} />
                          </FormControl>
                          <FormDescription>
                            First notification will be sent via message at this
                            time
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    <FormField
                      control={form.control}
                      name="callAlertThreshold"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Call Alert Time</FormLabel>
                          <FormControl>
                            <Input type="time" {...field} />
                          </FormControl>
                          <FormDescription>
                            If no response to message, a call will be made at
                            this time
                          </FormDescription>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>
                </CardContent>
              </Card>
            </TabsContent>
          </form>
        </Form>
      </Tabs>
    </div>
  );
}

```



## Report Generation
```
src/app/(system)/kindergarten/[orgId]/report/
└── page.tsx                     # Report generation page
```
page.tsx:
```
"use client";

import React, { useState, useEffect } from "react";
import {
  Select,
  SelectTrigger,
  SelectValue,
  SelectContent,
  SelectItem,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Printer, Search } from "lucide-react";

interface DummyClass {
  id: string;
  name: string;
}

interface DummyStudent {
  id: string;
  name: string;
  class: string;
  age: number;
  attendance: string;
  lateCount: number;
  absentCount: number;
  parentName: string;
  parentPhone: string;
}

const DUMMY_CLASSES: DummyClass[] = [
  { id: "1", name: "4 Kenyalang" },
  { id: "2", name: "4 Kenari" },
  { id: "3", name: "4 Mutiara" },
];

const DUMMY_STUDENTS: DummyStudent[] = [
  {
    id: "1",
    name: "Ahmad bin Abdullah",
    class: "4 Kenyalang",
    age: 4,
    attendance: "95%",
    lateCount: 2,
    absentCount: 1,
    parentName: "Abdullah bin Ahmad",
    parentPhone: "0123456789",
  },
  {
    id: "2",
    name: "Sarah binti Kamal",
    class: "4 Kenyalang",
    age: 4,
    attendance: "98%",
    lateCount: 1,
    absentCount: 0,
    parentName: "Kamal bin Ibrahim",
    parentPhone: "0123456788",
  },
  {
    id: "3",
    name: "Amir bin Hassan",
    class: "4 Kenari",
    age: 4,
    attendance: "92%",
    lateCount: 3,
    absentCount: 2,
    parentName: "Hassan bin Ali",
    parentPhone: "0123456787",
  },
];

export default function ReportPage() {
  const [selectedClass, setSelectedClass] = useState<string | null>(null);
  const [searchQuery, setSearchQuery] = useState("");

  const filteredStudents = DUMMY_STUDENTS.filter((student) => {
    const matchesClass = !selectedClass || student.class === selectedClass;
    const matchesSearch =
      student.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      student.parentName.toLowerCase().includes(searchQuery.toLowerCase());
    return matchesClass && matchesSearch;
  });

  const handlePrint = () => {
    window.print();
  };

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">Student Reports</h1>
        <Button onClick={handlePrint} className="print:hidden">
          <Printer className="h-4 w-4 mr-2" />
          Print Report
        </Button>
      </div>

      <div className="flex gap-4 print:hidden">
        <div className="w-[200px]">
          <Select
            value={selectedClass || undefined}
            onValueChange={setSelectedClass}
          >
            <SelectTrigger>
              <SelectValue placeholder="Filter by class" />
            </SelectTrigger>
            <SelectContent>
              {DUMMY_CLASSES.map((cls) => (
                <SelectItem key={cls.id} value={cls.name}>
                  {cls.name}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
        <div className="flex-1 max-w-sm">
          <div className="relative">
            <Search className="absolute left-2 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search by student or parent name"
              className="pl-8"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
        </div>
      </div>

      <Card className="mt-6">
        <CardHeader className="pb-2">
          <CardTitle>Student Information</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="rounded-md border">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Student Name
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Class
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Age
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Attendance
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Late Count
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Absent Count
                  </th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Parent Info
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredStudents.map((student) => (
                  <tr key={student.id}>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {student.name}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {student.class}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {student.age} years
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {student.attendance}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {student.lateCount}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {student.absentCount}
                    </td>
                    <td className="px-6 py-4">
                      <div>
                        <div className="font-medium">{student.parentName}</div>
                        <div className="text-sm text-gray-500">
                          {student.parentPhone}
                        </div>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </CardContent>
      </Card>

      <style jsx global>{`
        @media print {
          body * {
            visibility: hidden;
          }
          .print\\:hidden {
            display: none;
          }
          #print-content,
          #print-content * {
            visibility: visible;
          }
          #print-content {
            position: absolute;
            left: 0;
            top: 0;
          }
        }
      `}</style>
    </div>
  );
}
```


## Profile Management
```
src/app/(system)/kindergarten/[orgId]/profile/
└── page.tsx                     # Profile management page
```
page.tsx:
```
// app/(auth)/kindergarten/[orgId]/profile/page.tsx
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useQuery } from "@tanstack/react-query";
import { toast } from "sonner";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Loader2, LogOut, Mail, User, ShieldCheck } from "lucide-react";
import { leaveKindergarten } from "@/actions/admin";
import { getCurrentUser } from "@/lib/firebase/auth";

interface AdminData {
  id: string;
  name: string;
  email: string;
  role: string;
  kindergartenId: string | null;
}

export default function ProfilePage() {
  const router = useRouter();
  const [isLeaving, setIsLeaving] = useState(false);

  // Fetch admin data
  const { data: adminData, isLoading } = useQuery<AdminData>({
    queryKey: ["adminProfile"],
    queryFn: async () => {
      // First get the firebaseId
      const firebaseId = await getCurrentUser();

      // Then fetch admin data
      const response = await fetch("/api/auth/profile", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ firebaseId }),
      });

      if (!response.ok) {
        throw new Error("Failed to fetch admin data");
      }

      const data = await response.json();
      return data;
    },
  });

  const handleLeaveKindergarten = async () => {
    if (!adminData?.id) return;

    try {
      setIsLeaving(true);
      const result = await leaveKindergarten({
        adminId: adminData.id,
      });

      if (result.error) {
        toast.error(result.error);
        return;
      }

      toast.success("Successfully left kindergarten");
      router.push("/setup");
    } catch (error) {
      toast.error("Failed to leave kindergarten");
    } finally {
      setIsLeaving(false);
    }
  };

  if (isLoading) {
    return (
      <div className="h-full flex items-center justify-center">
        <Loader2 className="h-6 w-6 animate-spin" />
      </div>
    );
  }

  return (
    <div className="container max-w-3xl py-10">
      <div className="mb-8">
        <h1 className="text-2xl font-bold tracking-tight">Profile</h1>
        <p className="text-muted-foreground">Manage your account settings</p>
      </div>

      <div className="space-y-6">
        <Card>
          <CardHeader>
            <CardTitle>Basic Information</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="flex items-center gap-2">
              <User className="h-4 w-4 text-muted-foreground" />
              <span>{adminData?.name || "N/A"}</span>
            </div>
            <div className="flex items-center gap-2">
              <Mail className="h-4 w-4 text-muted-foreground" />
              <span>{adminData?.email || "N/A"}</span>
            </div>
            <div className="flex items-center gap-2">
              <ShieldCheck className="h-4 w-4 text-muted-foreground" />
              <span>{adminData?.role || "N/A"}</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Danger Zone</CardTitle>
          </CardHeader>
          <CardContent>
            <AlertDialog>
              <AlertDialogTrigger asChild>
                <Button variant="destructive" disabled={isLeaving}>
                  {isLeaving ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Leaving...
                    </>
                  ) : (
                    <>
                      <LogOut className="mr-2 h-4 w-4" />
                      Leave Kindergarten
                    </>
                  )}
                </Button>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
                  <AlertDialogDescription>
                    This will remove your access to this kindergarten. You'll
                    need to be added back by another admin to regain access.
                  </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel>Cancel</AlertDialogCancel>
                  <AlertDialogAction
                    onClick={handleLeaveKindergarten}
                    className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                  >
                    Leave
                  </AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

```


## Shared Components
```
src/app/(system)/kindergarten/[orgId]/_components/
├── data-table.tsx              # Reusable data table
└── alert-list.tsx                  # Navigation sidebar
└── sidebar.tsx 
```

data-table.tsx:
```
"use client";

import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  useReactTable,
  getFilteredRowModel,
  ColumnFiltersState,
  SortingState,
  getSortedRowModel,
} from "@tanstack/react-table";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import React from "react";
import { useParams, useRouter } from "next/navigation";

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[];
  data: TData[];
  searchKey?: string;
  showSearch?: boolean;
}

export function DataTable<TData, TValue>({
  columns,
  data,
  searchKey,
  showSearch = true,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  );
  const router = useRouter();
  const { orgId } = useParams();

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onSortingChange: setSorting,
    getSortedRowModel: getSortedRowModel(),
    onColumnFiltersChange: setColumnFilters,
    getFilteredRowModel: getFilteredRowModel(),
    state: {
      sorting,
      columnFilters,
    },
    // Set initial pagination state
    initialState: {
      pagination: {
        pageSize: 5, // Set number of rows per page
      },
    },
  });

  return (
    <div>
      {showSearch && searchKey && (
        <div className="flex items-center pt-4">
          <Input
            placeholder="Search..."
            value={
              (table.getColumn(searchKey)?.getFilterValue() as string) ?? ""
            }
            onChange={(event) =>
              table.getColumn(searchKey)?.setFilterValue(event.target.value)
            }
            className="max-w-sm"
          />
        </div>
      )}
      <div className="rounded-md border mt-8">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows?.length ? (
              table.getRowModel().rows.map((row) => (
                <TableRow
                  key={row.id}
                  onClick={() =>
                    router.push(`/kindergarten/${orgId}/student-list/test`)
                  }
                >
                  {row.getVisibleCells().map((cell) => (
                    <TableCell key={cell.id}>
                      {flexRender(
                        cell.column.columnDef.cell,
                        cell.getContext()
                      )}
                    </TableCell>
                  ))}
                </TableRow>
              ))
            ) : (
              <TableRow>
                <TableCell
                  colSpan={columns.length}
                  className="h-24 text-center"
                >
                  No results.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
      <div className="flex items-center justify-end space-x-2 py-4">
        <Button
          variant="outline"
          size="sm"
          onClick={() => table.previousPage()}
          disabled={!table.getCanPreviousPage()}
        >
          Previous
        </Button>
        <Button
          variant="outline"
          size="sm"
          onClick={() => table.nextPage()}
          disabled={!table.getCanNextPage()}
        >
          Next
        </Button>
      </div>
    </div>
  );
}

```

alert-list.tsx:
```
"use client";
import { DataTable } from "./data-table";
import { respondedColumns } from "../alert-list/_components/alert-table/responded-columns";
import { awaitingColumns } from "../alert-list/_components/alert-table/awaiting-columns";
import { AlertStudent } from "@/types/alert";
import { Card, CardContent } from "@/components/ui/card";

type AlertListProps = {
  respondedData: AlertStudent[];
  awaitingData: AlertStudent[];
};

export function AlertList({ respondedData, awaitingData }: AlertListProps) {
  return (
    <div className="space-y-6">
      {/* Responded Section */}
      <div>
        <div className="flex items-center gap-2 mb-4">
          <div className="h-2 w-2 rounded-full bg-green-500" />
          <h2 className="text-lg font-medium">Responded</h2>
        </div>
        <Card>
          <CardContent>
            <DataTable
              columns={respondedColumns}
              data={respondedData}
              searchKey="name"
              showSearch={false}
            />
          </CardContent>
        </Card>
      </div>

      {/* Awaiting Response Section */}
      <div>
        <div className="flex items-center gap-2 mb-4">
          <div className="h-2 w-2 rounded-full bg-red-500" />
          <h2 className="text-lg font-medium">Awaiting Respond</h2>
        </div>
        <Card>
          <CardContent>
            <DataTable
              columns={awaitingColumns}
              data={awaitingData}
              searchKey="name"
              showSearch={true}
            />
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

```

sidebar.tsx:
```
// src/app/kindergarten/_components/sidebar.tsx
"use client";
import { Logo } from "@/components/logo";
import {
  LayoutDashboard,
  Bell,
  Users,
  CalendarDays,
  FileText,
  User,
  Settings,
  LogOut,
  GraduationCap,
} from "lucide-react";
import Link from "next/link";
import { useParams, usePathname, useRouter } from "next/navigation";
import { cn } from "@/lib/utils";
import { logout } from "@/actions/auth/login";
import { toast } from "sonner";

export const Sidebar = () => {
  const params = useParams();
  const pathname = usePathname();
  const router = useRouter();
  const orgId = params.orgId;

  const handleLogout = async () => {
    try {
      const result = await logout();
      if (result.data?.success) {
        toast.success("Logged out successfully");
        router.push("/sign-in");
      } else {
        toast.error("Failed to logout");
      }
    } catch (error) {
      toast.error("Something went wrong");
    }
  };

  const routes = [
    {
      label: "MAIN",
      routes: [
        {
          label: "Dashboard",
          icon: <LayoutDashboard className="w-5 h-5" />,
          href: `/kindergarten/${orgId}/dashboard`,
        },
        {
          label: "Alert List",
          icon: <Bell className="w-5 h-5" />,
          href: `/kindergarten/${orgId}/alert-list`,
        },
        {
          label: "Student List",
          icon: <Users className="w-5 h-5" />,
          href: `/kindergarten/${orgId}/student-list`,
        },
        {
          label: "Events",
          icon: <CalendarDays className="w-5 h-5" />,
          href: `/kindergarten/${orgId}/events`,
        },
        {
          label: "Reports",
          icon: <FileText className="w-5 h-5" />,
          href: `/kindergarten/${orgId}/report`,
        },
        {
          label: "Classes", // Add this new route
          icon: <GraduationCap className="w-5 h-5" />,
          href: `/kindergarten/${orgId}/classes`,
        },
      ],
    },
    {
      label: "USER",
      routes: [
        {
          label: "Profile",
          icon: <User className="w-5 h-5" />,
          href: `/kindergarten/${orgId}/profile`,
        },
        {
          label: "Settings",
          icon: <Settings className="w-5 h-5" />,
          href: `/kindergarten/${orgId}/settings`,
        },
      ],
    },
  ];

  return (
    <div className="w-64 bg-white p-6 space-y-8 min-h-screen border-r">
      <div className="flex items-center space-x-4 mb-8">
        <Logo />
      </div>

      <div className="space-y-6">
        {routes.map((section) => (
          <div key={section.label} className="space-y-2">
            <div className="text-sm text-gray-500">{section.label}</div>
            <nav className="space-y-2">
              {section.routes.map((route) => (
                <Link
                  key={route.href}
                  href={route.href}
                  className={cn(
                    "flex items-center space-x-3 w-full p-2 rounded transition-colors",
                    pathname === route.href
                      ? "bg-gray-100 text-blue-600"
                      : "hover:bg-gray-100"
                  )}
                >
                  {route.icon}
                  <span>{route.label}</span>
                </Link>
              ))}
            </nav>
          </div>
        ))}

        {/* Logout Button */}
        <div className="pt-6">
          <button
            onClick={handleLogout}
            className="flex items-center space-x-3 w-full p-2 rounded hover:bg-gray-100 text-red-500 transition-colors"
          >
            <LogOut className="w-5 h-5" />
            <span>Logout</span>
          </button>
        </div>
      </div>
    </div>
  );
};


```

Each section represents a major feature of the kindergarten management system, with its respective pages and components organized in a modular structure. The `_components` directories contain reusable UI components specific to each feature section.
